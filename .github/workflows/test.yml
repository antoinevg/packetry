name: CI-TEST

on:
  push:
  pull_request:
  workflow_dispatch:

  # https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
  #workflow_run:
  #  workflows: ['CI-TEST-PRE']
  #  types: [completed]



env:
  IMAGE_NAME: ${{ github.repository }}-test
  IMAGE_TAG:  test #${{ github.ref_name }}

defaults:
  run:
    shell: bash
    working-directory: /home/runner

jobs:
  create-test-docker-image:
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    name: Create Test Docker image
    runs-on: ubuntu-latest
    environment: TESTENV
    outputs:
      NAME: ${{ env.IMAGE_NAME }}
      TAG:  ${{ env.IMAGE_TAG }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Escape image tag
        run: |
          echo "IMAGE_TAG=$(echo ${{ env.IMAGE_TAG }} | sed -e 's/\//-/g')" >> $GITHUB_ENV

      - name: Check image tag
        run: |
          echo "IMAGE_NAME: ${{ env.IMAGE_NAME }}"
          echo "IMAGE_TAG:  ${{ env.IMAGE_TAG  }}"

      - name: Check if Dockerfile has changed
        uses: dorny/paths-filter@v3
        id: changed
        with:
          base: ${{ github.ref_name }}
          filters: |
            dockerfile:
              - "appimage/test/docker/**"

      - name: Check if Docker image exists
        id: exists
        shell: bash
        run: |
          declare -a HEADERS=(
            '-H' "Accept: application/vnd.oci.image.manifest.v1+json"
            '-H' "Accept: application/vnd.oci.image.index.v1+json"
            '-H' "Authorization: Bearer $(echo ${{ secrets.GITHUB_TOKEN }} | base64)"
          )
          RESULT=$(curl "${HEADERS[@]}" https://ghcr.io/v2/${IMAGE_NAME}/manifests/${IMAGE_TAG})
          echo 'dockerimage<<EOF' >> $GITHUB_OUTPUT
          echo ${RESULT} | jq 'has("manifests")' >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
          echo
          echo exists:        ${{ steps.changed.outputs.dockerfile }}

      - name: Debug Check
        shell: bash
        run: |
          echo IMAGE_NAME:     ${{ env.IMAGE_NAME }}           # <repo-owner>/<repo>-test
          echo IMAGE_TAG:      ${{ env.IMAGE_TAG }}            # <gh.ref_name>
          echo
          echo gh.actor:       ${{ github.actor }}             # antoinevg                 antoinevg
          echo gh.trig_actor:  ${{ github.triggering_actor }}  # antoinevg                 antoinevg
          echo gh.repo:        ${{ github.repository }}        # antoinevg/packetry        greatscottgadgets/packetry
          echo gh.repo_owner:  ${{ github.repository_owner }}  # antoinevg                 greatscottgadgets
          echo gh.repo_name:   ${{ github.repository_name }}   # ???
          echo gh.base_ref:    ${{ github.base_ref }}          # n/a                       main
          echo gh.head_ref:    ${{ github.head_ref }}          # n/a                       antoinevg/linux-appimage
          echo gh.ref_name:    ${{ github.ref_name }}          # antoinevg-linux-appimage  133/merge
          echo gh_token:       ${{ secrets.GITHUB_TOKEN }}
          echo
          echo password:       ${{ secrets.DOCKER_REGISTRY_TOKEN }}
          echo password_env:   ${{ secrets.DOCKER_REGISTRY_TOKEN_ENV }}
          echo password_del:   ${{ secrets.DOCKER_REGISTRY_TOKEN_DELETEME-TESTENV }}
          echo
          echo password:       ${{ env.DOCKER_REGISTRY_TOKEN }}
          echo password_env:   ${{ env.DOCKER_REGISTRY_TOKEN_ENV-TESTENV }}
          echo password_del:   ${{ env.DOCKER_REGISTRY_TOKEN_DELETEME-TESTENV }}
          echo
          echo password:       ${{ vars.DOCKER_REGISTRY_TOKEN }}
          echo password_env:   ${{ vars.DOCKER_REGISTRY_TOKEN_ENV-TESTENV }}
          echo password_del:   ${{ vars.DOCKER_REGISTRY_TOKEN_DELETEME }}

      - name: Check if check is true
        if: ${{ steps.exists.outputs.dockerimage == 'true'  }}
        run: |
          echo "Dockerfile has changed"

      - name: Check if check is false
        if: ${{ steps.exists.outputs.dockerimage == 'false' }}
        run: |
          echo "Dockerfile has not changed"

      - name: Log in to the Container registry
        if: ${{ steps.changed.outputs.dockerfile == 'true' || steps.exists.outputs.dockerimage == 'false' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          #password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        if: ${{ steps.changed.outputs.dockerfile == 'true' || steps.exists.outputs.dockerimage == 'false'  }}
        uses: docker/setup-buildx-action@v3
        # Error: buildx failed with: ERROR: denied: installation not allowed to Create organization package
        #with:
        #  driver: docker
        #  install: true

      - name: Build and push Docker image
        if: ${{ steps.changed.outputs.dockerfile == 'true' || steps.exists.outputs.dockerimage == 'false'  }}
        id: push
        uses: docker/build-push-action@v6
        with:
          context: appimage/test/docker/
          push: true
          tags: ghcr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Generate artifact attestation
        if: ${{ steps.changed.outputs.dockerfile == 'true' || steps.exists.outputs.dockerimage == 'false'  }}
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true


  test-remote:
    permissions:
      contents: read

    needs: create-test-docker-image

    name: Run test action
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/${{ needs.create-test-docker-image.outputs.NAME }}:${{ needs.create-test-docker-image.outputs.TAG }}
      options: --user root # see: https://github.com/actions/checkout/issues/1014
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Check image name & tag
        run: |
          echo "NAME:       ${{ needs.create-test-docker-image.outputs.NAME }}"
          echo "TAG:        ${{ needs.create-test-docker-image.outputs.TAG }}"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check environment
        run: |
          echo PATH: $PATH
          echo HOME: $HOME
          echo pwd:  `pwd`
          ls -al

      - name: Test Action
        uses: ./appimage/test/
        with:
          executable: ./target/release/packetry
